% $Header: svn://.../trunk/AMIGO2R2016/Preprocessor/AMIGO_gen_death_penalty.m 2204 2015-09-24 07:11:53Z evabalsa $
  function [results,inputs]=AMIGO_gen_death_penalty(inputs,results,privstruct);  
% AMIGO_gen_OEDconst: generates constraints for the OED problem
%
%******************************************************************************
% AMIGO2: dynamic modeling, optimization and control of biological systems    % 
% Code development:     Eva Balsa-Canto                                       %
% Address:              Process Engineering Group, IIM-CSIC                   %
%                       C/Eduardo Cabello 6, 36208, Vigo-Spain                %
% e-mail:               ebalsa@iim.csic.es                                    %
% Copyright:            CSIC, Spanish National Research Council               %
%******************************************************************************
%
%*****************************************************************************%
%                                                                             %
%  AMIGO_gen_death_penalty: generates death penalty
%                    for the different optimizers                             %
%                    It should be noted that different solvers will require   %
%                    different information. Particular cases for the available%
%                    optimizers are included here                             %
%*****************************************************************************%



    fid2=fopen(results.pathd.constfile,'w');
    fid3=fopen(results.pathd.ss_constfile,'w');

    fprintf(fid2,'%%\n%%Code generated by AMIGO to compute constraints for OED and PE\n%%\n');
   
    
    if privstruct.n_const_ineq_tf>0 || privstruct.n_const_eq_tf>0
        
    if numel(inputs.model.st_names)>0
    for i=1:inputs.model.n_st
         fprintf(fid2,'\t%s=privstruct.yteor(end,%u);\n',inputs.model.st_names(i,:),i);
    end

    end
    end
    
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 % CONSTRAINTS: END-POINT EQUALITY
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     
       
    % MOST METHODS HANDLE INEQUALITY CONSTRAINTS THUS WE WILL TRANSFORM 
    % EQUALITY CONSTRAINTS INTO INEQUALITIES WITH A TOLERANCE INTRODUCED
    % BY USER.
    fprintf(fid2,'\n%% Definition of constraints\n');
    ncons=0;
    
    if sum(cell2mat(inputs.exps.n_const_eq_tf))>0
        
        fprintf(fid3,'problem.neq=0;\n');     
        fprintf(fid2,'\nswitch iexp\n');
    
        for iexp=1:inputs.exps.n_exp
            if inputs.exps.n_const_eq_tf{iexp}>0  
            fprintf(fid2,'\n%% End-point equality constraints (transformed into inequalities) for experiment: %u\n',iexp);      
            fprintf(fid2,'\t case %u\n',iexp);
            for icons=1:inputs.exps.n_const_eq_tf{iexp}   
            fprintf(fid2,'\t hh{%u}(1,%u)=abs(%s);\n',iexp,icons,inputs.exps.const_eq_tf(icons,:));
            end
        
            % FOR DE WE NEED TO IMPLEMENT THE DEATH PENALTY
              switch inputs.nlpsol.nlpsolver
                case 'de'
                for icons=1:inputs.exps.n_const_eq_tf{iexp} 
                fprintf(fid2,'\th(%u) = abs(%s)-%f;\n',ncons+icons,inputs.exps.n_const_eq_tf{iexp}(icons,:),inputs.exps.eq_const_max_viol{iexp});
                end    
                fprintf(fid2,'\n%% Death penalty for DE\n');   
                fprintf(fid2,'\nswitch inputs.nlpsol.nlpsolver\n');  
                fprintf(fid2,'\ncase ''de''\n');
                for icons=1:inputs.exps.n_const_eq_tf{iexp}  
                fprintf(fid2,'\t if abs(g(%u)) >%f\n',ncons+icons,inputs.exps.eq_const_max_viol{iexp}); 
                fprintf(fid2,'\t f=inf;\n');
                fprintf(fid2,'\t end;\n'); 
                end
            fprintf(fid2,'\t end;\n');
              end     
%               case {'ssm','ess','fssm','local','multistart'}
                %end %switch inputs.nlpsol.nlpsolver
            end  %if inputs.exps.n_const_eq_tf{iexp}>0   
        
            for icons=1:inputs.exps.n_const_eq_tf{iexp}
            fprintf(fid3,'problem.c_L(1,%u)=-%f;\n',icons+ncons,inputs.exps.eq_const_max_viol);
            fprintf(fid3,'problem.c_U(1,%u)=%f;\n',icons+ncons,inputs.exps.eq_const_max_viol);
            end  
        ncons=ncons+inputs.exps.n_const_eq_tf{iexp};        
        
    end % for iexp=1:inputs.exps.n_exp
    
    fprintf(fid2,'end %switch iexp\n');
    fprintf(fid2,'\nh=cell2mat(hh);')    
    
    
    else
 
        fprintf(fid3,'problem.neq=0;\n');
        fprintf(fid2,'\th(1) =0;\n'); 
    end
   
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 % CONSTRAINTS: END-POINT INEQUALITY
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%       
    niqcons=ncons;
    
    if sum(cell2mat(inputs.exps.n_const_ineq_tf))>0
        
        fprintf(fid2,'\nswitch iexp\n');    
        for iexp=1:inputs.exps.n_exp
            if inputs.exps.n_const_ineq_tf{iexp}>0
            fprintf(fid2,'\n%% End-point inequality constraints\n');    
            fprintf(fid2,'\t case %u\n',iexp);
            for icons=1:inputs.exps.n_const_ineq_tf{iexp} 
            fprintf(fid2,'\thh{%u}(1,%u) = %s;\n',iexp,icons,inputs.exps.const_ineq_tf{iexp}(icons,:)); 
            end
    
            for icons=1:inputs.exps.n_const_ineq_tf{iexp}
            fprintf(fid3,'problem.c_L(1,%u)=-inf;\n',icons+niqcons);
            fprintf(fid3,'problem.c_U(1,%u)=%f;\n',icons+niqcons,inputs.exps.ineq_const_max_viol);
            end 
            end
       
         niqcons=niqcons+inputs.exps.n_const_ineq_tf{iexp};
      

    end %   for iexp=1:inputs.exps.n_exp
    
    fprintf(fid2,'end %switch iexp\n');
    fprintf(fid2,'\nh=cell2mat(hh);');


    % FOR DE WE NEED TO IMPLEMENT THE DEATH PENALTY
            switch inputs.nlpsol.nlpsolver 
            case 'de'
            fprintf(fid2,'\n%% Death penalty for DE\n');   
            fprintf(fid2,'\nswitch inputs.nlpsol.nlpsolver\n');  
            fprintf(fid2,'\ncase ''de''\n');
            for icons=1 :niqcons
            fprintf(fid2,'\t if h(%u) >%f\n',icons,inputs.exps.ineq_const_max_viol); 
            fprintf(fid2,'\t f=inf;\n');
            fprintf(fid2,'\t end;\n');
            end
            fprintf(fid2,'\t end;\n');
            end
    
    
    
    
    else
 
    fprintf(fid3,'problem.ineq=0;\n');
    fprintf(fid2,'\th(1) =0;\n'); 
    end
    fclose(fid2);
    fclose(fid3);
   
    
    fprintf(1,'\n\nThe following file has been created:\n')
    which(results.pathd.constraints)

    
return

  
        