function results = AMIGO_PE_results_doc
% Create the sceleton:
%     circadian_pe;
%     AMIGO_Prep(inputs);
%     results = AMIGO_PE(inputs);
%     clc, AMIGO_displayStruct_fullsyntax(results)

results.PEsol.index_global_theta=	'indices of global parameters in the input.model.par';
results.PEsol.index_global_theta_y0=	'indices of global initial conditions in the input.model.st_names';
results.PEsol.index_local_theta=	'indices of local parameters in the input.model.par';
results.PEsol.index_local_theta_y0=	'indices of local initial conditions in the input.model.st_names';
results.PEsol.n_global_theta=	'number of global parameteres';
results.PEsol.n_global_theta_y0=	'number of global initial conditions';
results.PEsol.n_local_theta=	'number of local estimated parameters';
results.PEsol.n_theta=	'number of total decision variables';
results.fit.R=	'weighted residuals'' vector';
results.fit.Rjac=	'Jacobian of the weighted residual vector';
results.fit.SM=	'Sensitivity matrix (obs or states??) for each experiment';
results.fit.condN_SM=	'condition number of the sensitivity matrix?? ';
results.fit.conf_interval=	'confidence interval for estimated parameters (only global?)';
results.fit.cpu_time=	'CPU time of the estimation';
results.fit.f=	'reached cost function value (duplicated? fbest)'; 
results.fit.fbest=	'reached cost function value';
results.fit.fjac=	'gradient of the objective function at the optimum';
results.fit.g_FIM=	'Fisher Information Matrix for global unknowns';
results.fit.g_corr_mat=	'correlation matrix for global unknowns';
results.fit.g_var_cov_mat=	'variance-covariance matrix for global unknowns';
results.fit.h=	'constraints violation penalty';
results.fit.hjac=	'gradient of constraints violation penalty';
results.fit.ms=	'simulated observables';
results.fit.obs_conf_mat=	'symmetric confidence intervals for observables';
results.fit.obs_cov_mat=	'covariance matrix for observables';
results.fit.rSM=	'Relative sensitivity matrix (obs or states??) for each experiment';
results.fit.r_sens_t=	'Relative sensitivity matrix (obs or states??) for each experiment (duplicated? rSM)';
results.fit.rel_conf_interval=	'relative confidence interval for estimated parameters (only global?)';
results.fit.rel_residuals=	'relative residuals'' vector';
results.fit.residuals=	'residuals'' vector';
results.fit.sens_t='Sensitivity matrix (obs or states??) for each experiment (duplicated? SM)';
results.fit.thetabest=	'optimal value of the decision variables';
results.fit.time=	'time data corresponding to the residuals';
results.nlpsol.act_bound=	'decision variables on the boundary';
results.nlpsol.bestit=	'decision variables when the cost function improved';
results.nlpsol.conv_curve=	'convergence curve: time and cost function';
results.nlpsol.cpu_time=	'CPU time of the estimation (duplicated? results.fit.cpu_time)';
results.nlpsol.f=	'cost function in iterations, when the cost function improved';
results.nlpsol.fbest=	'optimal value of the cost function';
results.nlpsol.neval=	'number of function evaluation, for convergence curve';
results.nlpsol.time=	'CPU time for convergence curves';
results.nlpsol.vbest=	'optimal values of the decision variables';
% results.pathd.AMIGO_path=	[]
% results.pathd.FIM=	[]
% results.pathd.conv_curve_path=	[]
% results.pathd.corr_mat_path=	[]
% results.pathd.fit_plot_path=	[]
% results.pathd.input_file=	[]
% results.pathd.multistart_hist=	[]
% results.pathd.obs_file=	[]
% results.pathd.obs_function=	[]
% results.pathd.obs_plot_path=	[]
% results.pathd.obs_sens_file=	[]
% results.pathd.obs_sens_function=	[]
results.pathd.problem_folder_path=	'problem folder path in the Results';
% results.pathd.report=	[]
results.pathd.report_name=	'name of the report';
% results.pathd.residuals_plot_path=	[]
results.pathd.results_folder=	'Results folder name';
% results.pathd.results_path=	'Results '
% results.pathd.run_overwrite=	'on'
% results.pathd.runident=	'run1'
% results.pathd.runident_cl=	[]
% % results.pathd.sens_mat_path=	[]
% results.pathd.sens_par_path=	[]
% results.pathd.sens_path=	[]
% results.pathd.short_name=	'circadian'
% results.pathd.struct_name=	'strreport'
% results.pathd.struct_results=	[]
% results.pathd.task_folder=	[]
% results.plotd.conf_cloud=	'ccloud'
% results.plotd.conf_hist=	'conf'
% results.plotd.contour1D_plot=	'costplot'
% results.plotd.contour_atol=	1e-009
% results.plotd.contour_plot=	'contourP'
% results.plotd.contour_rtol=	1e-009
% results.plotd.convergence_curve=	'conv_curve'
% results.plotd.data_plot=	'data_plot'
% results.plotd.ecc=	'ecc'
% results.plotd.epssave=	0
% results.plotd.figsave=	1
% results.plotd.fit_plot=	'fit_plot'
% results.plotd.multistart_hist=	'hist'
% results.plotd.n_t_plot=	120
% results.plotd.number_max_hist=	8
% results.plotd.number_max_obs=	9
% results.plotd.number_max_states=	9
% results.plotd.nx_contour=	60
% results.plotd.ny_contour=	60
% results.plotd.obs_plot=	'obs_plot'
% results.plotd.plotlevel=	'medium'
% results.plotd.residuals_plot=	'residuals'
% results.plotd.states_plot=	'states_plot'
% results.rank.number_int_errors=	'';
results.sim.obs=	'simulated observables with high time resolution';
results.sim.sim_data=	'simulated observables at data times';
results.sim.states=	'simulated states with high time resolution';
results.sim.tsim=	'high resolution time-points';